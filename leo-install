#!/bin/bash
# This script written by Leoparx and @iamlongnguyen

if [ "$(id -u)" != "0" ]; then
	echo "You must be root to execute the script. Exiting."
	do_exit 1
fi

# Please do not change
SCRIPT_VERSION=1.0
LEO_DIR="/leoparx"
BUILD_DIR="${LEO_DIR}/build"
BUILD_CONF_DIR="${BUILD_DIR}/conf"
BUILD_SOURCE_DIR="${BUILD_DIR}/sources"
VERSION_PACKAGES="packages.leo"
VALID_VERSIONS="valid_versions.leo"
BUILD_CONFIGS="configs.leo"
BUILD_SERVER="http://files.directadmin.com/services/custombuild"

mkdir -p ${BUILD_DIR}
mkdir -p ${BUILD_CONF_DIR}
mkdir -p ${BUILD_SOURCE_DIR}
chmod 700 ${BUILD_DIR}
chmod 700 ${BUILD_CONF_DIR}
chmod 700 ${BUILD_SOURCE_DIR}

OS=`uname`
HOSTNAME=`hostname`


WEBSERVER_ENABLE=yes
WEBSERVER_TYPE=nginx
PHP1_ENABLE=yes
PHP1_VERSION=7.3
PHP2_ENABLE=no
PHP2_VERSION=5.6
MYSQL_ENABLE=yes
MYSQL_TYPE=mysql
MYSQL_VERSION=5.6
PMA_ENABLE=yes
FTP_ENABLE=yes
LETSENCRYPT_ENABLE=yes

if [ -s /etc/os-release ]; then
	OS_CENTOS_VER=`grep -m1 '^VERSION_ID=' /etc/os-release | cut -d. -f1 | cut -d'"' -f2`
else
	OS_CENTOS_VER=`grep -m1 -o '[0-9]*\.[0-9]*' /etc/redhat-release | cut -d. -f1`
fi

if [ "`cat /proc/cpuinfo | grep -F 'model name' | wc -l`" -gt 0 ]; then
	CPU_CORES="`cat /proc/cpuinfo | grep -F 'model name' | wc -l`"
fi

MEMORY=`grep -m1 'MemTotal' /proc/meminfo | awk '{print $2}'`

LANG=C

if uname -m | grep -qE -m1 'amd64|x86_64'; then
	B64=1
	LD_LIBRARY_PATH=/usr/lib/apache:/usr/local/icu/lib:/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
	export LD_LIBRARY_PATH
	PKG_CONFIG_PATH=/usr/local/icu/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/local/lib/pkgconfig
	export PKG_CONFIG_PATH
	if [ "${OS_CENTOS_VER}" = "6" ]; then
		export KERBEROS_LIBS="-L/usr/lib64 -lkrb5 -lk5crypto -lgssapi_krb5"
		export KERBEROS_CFLAGS="-I/usr/include"
		export ONIG_LIBS="-L/usr/lib64 -lonig"
        export ONIG_CFLAGS="-I/usr/include"
	fi
fi

if [ ! -z "${MEMORY}" ]; then
	if [ ${MEMORY} -lt 2097152 ]; then
		CPU_CORES=1
	fi
fi

# Check path for /usr/local/bin
if ! echo "${PATH}" | grep -qF -m1 '/usr/local/bin:'; then
	export PATH=/usr/local/bin:$PATH
fi

# Create directory for leoparx if not exists
if [ ! -d "${LEO_DIR}" ]; then
	mkdir -p ${LEO_DIR}
	chmod 755 ${LEO_DIR}
fi

# Check this script is running
if [ -s ${BUILD_DIR}/leo.pid ]; then
	pid=`cat ${BUILD_DIR}/leo.pid`
	check_pid=`ps aux | awk '{print $2}' | grep ${pid}`

	if [ "${check_pid}" != "" ] ; then
		printf "This script may already be running in another process. Exiting.."
		do_exit 1
	else
		echo $$ > ${BUILD_DIR}/leo.pid
	fi
else 
	touch ${BUILD_DIR}/leo.pid
	echo $$ > ${BUILD_DIR}/leo.pid
fi

remove_lock_file() {
	rm -rf ${BUILD_DIR}/leo.pid
}

do_exit() {
	if [ ! -z "${2}" ]; then 
		echo ${2}
	fi

	remove_lock_file
	exit ${1}
}

# Common pre-install
#yum install -y wget tar gcc gcc-c++ flex bison make openssl openssl-devel perl quota libaio \
#libcom_err-devel libcurl-devel gd zlib-devel zip unzip libcap-devel cronie bzip2 cyrus-sasl-devel perl-ExtUtils-Embed \
#autoconf automake libtool which patch mailx bzip2-devel lsof glibc-headers kernel-devel expat-devel \
#psmisc net-tools systemd-devel libdb-devel perl-DBI perl-Perl4-CoreLibs perl-libwww-perl xfsprogs rsyslog logrotate crontabs file kernel-headers

# Download source file function 
get_file() {
	local file_name=${1}
	local dest_dir=${2}
	local file_server=${3}
	local file_url="${file_server}${file_name}"
	
	if [ -z "${dest_dir}" ]; then 
		dest_file="./${file_name}"
	else 
		dest_file="${dest_dir}/${file_name}"
	fi

	if [ ! -s "${dest_file}" ]; then
		while true ; do
			wget ${file_url} -O ${dest_file}
			if [ ! -s "${dest_file}" ]; then
				echo "*** Download has failed, would you like to try to download again? (y,n): ";
				read yesno
				if [ "${yesno}" = "n" ]; then
					do_exit 1
				fi
			else
				break
			fi
		done
	else
		while true ; do
			echo "*** Would you like to re-download? (y,n): ";
			read yesno

			# Fix for force re-build
			if [[ "${yesno}" = "n" && ${USER_INPUT} != "f" ]]; then
				break
			else
				rm -rf ${dest_file}
				get_file "${file_url}" -O "${dest_file}"
			fi

			break
		done
	fi
}

get_config_file() {
	get_file "${1}" "${BUILD_CONF_DIR}/${2}" "${BUILD_SERVER}/build/configs"
}
get_source_file() {
	get_file "${1}" "${BUILD_SOURCE_DIR}/${2}" "${BUILD_SERVER}/build/sources"
}

init_version_packages() {
	local version_packages=${BUILD_CONF_DIR}/${VERSION_PACKAGES}
	if [ ! -s ${version_packages} ]; then
		get_file ${VERSION_PACKAGES}

	else
		while true; do
			echo "\n*** Would you like to re-download version packages? (y,n): \n";
			read yesno

			# Fix for force re-build
			if [[ "${yesno}" = "n" && ${USER_INPUT} != "f" ]]; then
				break
			else
				rm -rf ${version_packages}
				get_file ${VERSION_PACKAGES}
			fi
			break
		done
	fi

	local source_versions=`awk -F ":" '{gsub(/\./,"_",$1);gsub(/-/,"_",$1);print "version_package_"$1"="$2}' ${version_packages}`
	eval ${source_versions}
}

get_package_version() {
	if [ -z ${1} ]; then
		echo ""
	else
		local file_name=${BUILD_CONF_DIR}/${VERSION_PACKAGES}
		local build_packages_version=`awk -F ":" '{gsub(/\./,"_",$1);gsub(/-/,"_",$1);print "local version_package_"$1"="$2}' ${file_name}`
		eval ${build_packages_version}
		local package_name="version_package_${1}"
		echo ${!package_name}
	fi
}

get_config_option() {
	local result=""
	if [ -z "${1}" ]; then
		echo ${result}
		return
	fi 

	local config_file=${BUILD_CONF_DIR}/configs.leo
	#cat ${conf_file}
	local build_configs=`awk -F "=" '{gsub(/\./,"_",$1);gsub(/-/,"_",$1);print "local opt_"$1"="$2}' ${config_file}`
	eval ${build_configs}
	local option_name="opt_${1}"
	echo ${!option_name}
}

get_valid_package_version() {
	local valid_package_versions_file="${BUILD_CONF_DIR}/valid_package_versions.leo"
	if [ -z "${1}" ]; then
		echo ""
        return
	fi

	local valid_versions=`awk -F ":" '{gsub(/\./,"_",$1);gsub(/-/,"_",$1);print "local valid_versions_"$1"=\""$2"\""}' ${valid_package_versions_file}`
	eval ${valid_versions}
	local result="valid_versions_${1}"
	echo ${!result}
}

set_config_option() {
	if [ -z "${3}" ]; then
		echo "Three arguments are required for this function"
		echo "set_config_option <option_name> <option_value> \"<options_valid>\""
		return
	fi

	local opt_name=${1}
	local opt_value=${2}
	local valid_options=${3}
	local config_options_file=${BUILD_CONF_DIR}/configs.leo

	# Check option name 
	local opt_line_number=`awk '{ print $0, NR }' ${config_options_file}  | grep -m1 ${opt_name} | awk '{print $2}'`

	if [ -z "${opt_line_number}" ]; then
		echo "${opt_name} is not a valid option."
		return
	fi

	# -f is force option
	if [ "${valid_options}" != "-f" ]; then 
		# Check option value
		for i in ${valid_options}; do
			if [ "${opt_value}" == "${i}" ]; then
				VALID_OPTION="yes"
				# Replace to new option value
				sed -i "${opt_line_number}s/.*/${opt_name}=${opt_value}/" ${config_options_file}
				
				return
			fi
		done

		echo "${opt_name}=${opt_value} is not a valid value."
	else
		sed -i "${opt_line_number}s/.*/${opt_name}=${opt_value}/" ${config_options_file}
	fi
}

get_config_options() {
	WEBSERVER_ENABLE=`get_config_option webserver_enable`
	WEBSERVER_TYPE=`get_config_option webserver_type`
	PHP1_ENABLE=`get_config_option php1_enable`
	PHP1_VERSION=`get_config_option php1_version`
	PHP2_ENABLE=`get_config_option php2_enable`
	PHP2_VERSION=`get_config_option php2_version`
	MYSQL_ENABLE=`get_config_option mysql_enable`
	MYSQL_TYPE=`get_config_option mysql_type`
	MYSQL_VERSION=`get_config_option mysql_version`
	PMA_ENABLE=`get_config_option pma_enable`
	FTP_ENABLE=`get_config_option pma_enablepma_enable`
}

set_config_options() {
	set_config_option webserver_enable "${WEBSERVER_ENABLE}" -f
	set_config_option webserver_type "${WEBSERVER_TYPE}" -f
	set_config_option php1_enable "${PHP1_ENABLE}" -f
	set_config_option php1_version "${PHP1_VERSION}" -f
	set_config_option php2_enable "${PHP2_ENABLE}" -f
	set_config_option php2_version "${PHP2_VERSION}" -f
	set_config_option mysql_enable "${MYSQL_ENABLE}" -f
	set_config_option mysql_type "${MYSQL_TYPE}" -f
	set_config_option mysql_version "${MYSQL_VERSION}" -f
	set_config_option pma_enable "${FTP_ENABLE}" -f
	set_config_option pma_enable "${PMA_ENABLE}" -f
}

build_config_options() {

	VALID_OPTION="no"
	OPTIONS_SET="yes no"
	until [ "${VALID_OPTION}" = "yes" ]; do
		echo -n "Do you want to install webserver? (${OPTIONS_SET// //}, default: yes):"
		read option
		if [ -z "${option}" ]; then
			option=${WEBSERVER_ENABLE}
		fi 
		set_config_option webserver_enable "${option}" "${OPTIONS_SET}"
	done

	get_config_options

	if [ "${WEBSERVER_ENABLE}" == "yes" ]; then 
		VALID_OPTION="no"
		OPTIONS_SET="nginx apache"
		until [ "${VALID_OPTION}" = "yes" ]; do
			echo -n "Please select webserver type you would like to use (${OPTIONS_SET// //}, default: ${WEBSERVER_TYPE}):"
			read option
			if [ -z "${option}" ]; then
				option=${WEBSERVER_TYPE}
			fi 
			set_config_option webserver_type "${option}" "${OPTIONS_SET}"
		done
	fi

	VALID_OPTION="no"
	OPTIONS_SET="yes no"
	until [ "${VALID_OPTION}" = "yes" ]; do
		echo -n "Do you want to install PHP? (${OPTIONS_SET// //}, default: yes):"
		read option
		if [ -z "${option}" ]; then
			option=yes
		fi 
		set_config_option php1_enable "${option}" "${OPTIONS_SET}"
	done

	get_config_options
	if [ "${PHP1_ENABLE}" == "yes" ]; then 
		VALID_OPTION="no"
		OPTIONS_SET=`get_valid_package_version php_version_opts`
		until [ "${VALID_OPTION}" = "yes" ]; do
			echo -n "Please select PHP version you would like to use (${OPTIONS_SET// //}, default: ${PHP1_VERSION}):"
			read option
			if [ -z "${option}" ]; then
				option=${PHP1_VERSION}
			fi 
			set_config_option php1_version "${option}" "${OPTIONS_SET}"
		done
	fi

	get_config_options
	if [ "${PHP1_ENABLE}" == "yes" ]; then 
		VALID_OPTION="no"
		OPTIONS_SET="yes no"
		until [ "${VALID_OPTION}" = "yes" ]; do
			echo -n "Do you want to install PHP2? (${OPTIONS_SET// //}, default: yes):"
			read option
			if [ -z "${option}" ]; then
				option=yes
			fi 
			set_config_option php2_enable "${option}" "${OPTIONS_SET}"
		done

		get_config_options
		if [ "${PHP2_ENABLE}" == "yes" ]; then 
			VALID_OPTION="no"
			OPTIONS_SET=`get_valid_package_version php_version_opts`
			until [ "${VALID_OPTION}" = "yes" ]; do
				echo -n "Please select PHP version you would like to use (${OPTIONS_SET// //}, default: ${PHP2_VERSION}):"
				read option
				if [ -z "${option}" ]; then
					option=${PHP2_VERSION}
				fi

				if [ "${option}" == "${PHP1_VERSION}" ]; then 
					echo "Can't same PHP version with PHP1"
				else 
					set_config_option php2_version "${option}" "${OPTIONS_SET}"
				fi
			done	
		fi 
	fi


	VALID_OPTION="no"
	OPTIONS_SET="yes no"
	until [ "${VALID_OPTION}" = "yes" ]; do
		echo -n "Do you want to install MySQL Server? (${OPTIONS_SET// //}, default: yes):"
		read option
		if [ -z "${option}" ]; then
			option=yes
		fi 
		set_config_option mysql_enable "${option}" "${OPTIONS_SET}"
	done

	get_config_options
	if [ "${MYSQL_ENABLE}" == "yes" ]; then 
		VALID_OPTION="no"
		OPTIONS_SET="mysql mariadb"
		until [ "${VALID_OPTION}" = "yes" ]; do
			echo -n "Please select type of MySQL Server you would like to use (${OPTIONS_SET// //}, default: ${MYSQL_TYPE}):"
			read option
			if [ -z "${option}" ]; then
				option=${MYSQL_TYPE}
			fi

			set_config_option mysql_type "${option}" "${OPTIONS_SET}"
		done

		get_config_options
		if [ "${MYSQL_TYPE}" == "mariadb" ]; then 
			VALID_OPTION="no"
			OPTIONS_SET=`get_valid_package_version mariadb_version_opts`
			until [ "${VALID_OPTION}" = "yes" ]; do
				echo -n "Please select MariaDB version you would like to use (${OPTIONS_SET// //}, default: ${MYSQL_VERSION}):"
				read option
				if [ -z "${option}" ]; then
					option=${MYSQL_VERSION}
				fi
				set_config_option mysql_version "${option}" "${OPTIONS_SET}"
			done
		else 
			VALID_OPTION="no"
			OPTIONS_SET=`get_valid_package_version mysql_version_opts`
			until [ "${VALID_OPTION}" = "yes" ]; do
				echo -n "Please select MySQL version you would like to use (${OPTIONS_SET// //}, default: ${MYSQL_VERSION}):"
				read option
				if [ -z "${option}" ]; then
					option=${MYSQL_VERSION}
				fi
				set_config_option mysql_version "${option}" "${OPTIONS_SET}"
			done
		fi
	fi

	VALID_OPTION="no"
	OPTIONS_SET="yes no"
	until [ "${VALID_OPTION}" = "yes" ]; do
		echo -n "Do you want to install PHPMyAdmin (${OPTIONS_SET// //}, default: yes):"
		read option
		if [ -z "${option}" ]; then
			option=yes
		fi 
		set_config_option pma_enable "${option}" "${OPTIONS_SET}"
	done

	VALID_OPTION="no"
	OPTIONS_SET="yes no"
	until [ "${VALID_OPTION}" = "yes" ]; do
		echo -n "Do you want to install FTP Server (Pure-FTPd) (${OPTIONS_SET// //}, default: yes):"
		read option
		if [ -z "${option}" ]; then
			option=yes
		fi 
		set_config_option ftp_enable "${option}" "${OPTIONS_SET}"
	done

	VALID_OPTION="no"
	OPTIONS_SET="yes no"
	until [ "${VALID_OPTION}" = "yes" ]; do
		echo -n "Do you want to install LetsEncrypt (${OPTIONS_SET// //}, default: yes):"
		read option
		if [ -z "${option}" ]; then
			option=yes
		fi 
		set_config_option letsencrypt_enable "${option}" "${OPTIONS_SET}"
	done

	get_config_options
}

init_build() {
	VALID_OPTION="no"
	OPTIONS_SET="1 2"
	BUILD_OPTION=1
	until [ "${VALID_OPTION}" = "yes" ]; do
		printf "\033[0;34m\n"
		printf "*********************************\n"
		printf "*** Welcome to Leoparx Server ***\n"
		printf "*********************************\n"
		printf "\033[0m\n"
		echo "Please choose 1 in 2 options to start installation:"
		echo "* 1) Install Leoparx with default settings: Nginx/PHP-FPM(7.3)/MariaDB(10.0.1)/phpMyAdmin/Pure-FTPd"
		echo "* 2) Custom your install"
		echo -n "Select option (1 or 2, default: 1):"
		read option

		if [ -z "${option}" ]; then 
			option=1
		fi
		
		if [ "${option}" == "1" ]; then 
			VALID_OPTION=yes
		elif [ "${option}" == "2" ]; then
			VALID_OPTION=yes
			BUILD_OPTION=2
		fi
	done

	if [ "${BUILD_OPTION}" == "1" ]; then 
		set_config_options
	else 
		build_config_options
	fi
}

create_ssl() {
	SSL_DIR="${LEO_DIR}/ssl"
	if [ ! -d "${SSL_DIR}" ]; then 
		mkdir -p ${SSL_DIR}
		chmod 640 ${SSL_DIR}
	fi 

	if [ ! -e "${SSL_DIR}/server.key" ] || [ ! -e "${SSL_DIR}/server.crt" ]; then
		openssl req -x509 -newkey rsa:2048 -keyout "${SSL_DIR}/server.key" -out "${SSL_DIR}/server.crt" -days 9999 -nodes -config ${BUILD_DIR}/configure/ssl/cert.txt

		chmod 600 "${SSL_DIR}/server.key"
		chmod 600 "${SSL_DIR}/server.crt"

		# Build crt with Comodo CA
		cat "${SSL_DIR}/server.crt" > "${SSL_DIR}/server.combined"
		cat "${BUILD_DIR}/configure/ssl/comodo.ca" >> "${SSL_DIR}/server.combined"
		chmod 600 "${SSL_DIR}/server.combined"
	fi

	if [ ! -e "${SSL_DIR}/dhparams.pem" ]; then 
		openssl dhparam -out "${SSL_DIR}/dhparams.pem" 2048
		chmod 600 "${SSL_DIR}/dhparams.pem"
	fi
}



#get_config_options
#echo ${PHP1_VERSION}



# Start build 
AUTOCONF="autoconf-2.69"
PCRE="pcre-8.44"
PCRE2="pcre2-10.34"
LIBJPEG="jpegsrc.v9d"
LIBPNG="libpng-1.6.37"
LIBWEBP="libwebp-1.1.0"
LIBMCRYPT="libmcrypt-2.5.8"
MHASH="mhash-0.9.9.9"
FREETYPE2="freetype-2.10.1"
ICONV="libiconv-1.16"
ICU="icu4c-66_1-src"
LIBXML2="libxml2-2.9.9"
LIBXSTL="libxslt-1.1.33"
LIBSODIUM="libsodium-1.0.18"
PHP73="php-7.3.16"


build_autoconf() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="autoconf-`get_package_version autoconf`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi

	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi

	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}

	./configure --prefix=/usr/local
	LANG=c make
	if [ $? -ne 0 ]; then
		printf "The make has failed. Exiting"
		do_exit 1
	fi

	echo "Make complete"
	
	LANG=c make install

	echo "Build autoconf completed"
}

build_pcre() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="pcre-`get_package_version pcre`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi

	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi

	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}
	
	./configure --enable-utf8 --enable-unicode-properties --enable-jit
	make CFLAGS=-fpic CPPFLAGS=-I/usr/kerberos/include
	if [ $? -ne 0 ]; then
		printf "The make has failed. Exiting"
		do_exit 1
	fi

	echo "Make complete"
	
	make install

	echo "Build pcre completed"

	/sbin/ldconfig
}


build_pcre2() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="pcre2-`get_package_version pcre2`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi
	
	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi

	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}
	
	./configure --enable-jit
	make -j ${CPU_CORES}
	if [ $? -ne 0 ]; then
		printf "The make has failed. Exiting"
		do_exit 1
	fi

	echo "Make complete"
	
	make install

	echo "Build pcre2 completed"
}


build_libjpeg() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="jpegsrc.`get_package_version jpegsrc`"

	if [ ! -s ${file_name} ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi

	# Remove old folder
	if [ -d "./jpeg-9d" ]; then
		rm -rf "./jpeg-9d"
	fi
	
	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd jpeg-9d

	./configure
	
	make

	if [ $? -ne 0 ]; then
		printf "The make has failed. Exiting"
		do_exit 1
	fi

	echo "Make complete"
	
	make install

	echo "Build libjpeg completed"
}


build_libpng() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="libpng-`get_package_version libpng`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi

	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi
	
	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}

	./configure --prefix=/usr/local
	
	make

	if [ $? -ne 0 ]; then
		printf "The make has failed. Exiting"
		do_exit 1
	fi

	echo "Make complete"
	
	make install

	echo "Build libpng completed"
}


build_libwebp() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="libwebp-`get_package_version libwebp`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi

	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi
	
	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}

	./configure --prefix=/usr/local
	
	make

	if [ $? -ne 0 ]; then
		printf "The make has failed. Exiting"
		do_exit 1
	fi

	echo "Make complete"
	
	make install

	echo "Build libwebp completed"
}


build_libmcrypt() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="libmcrypt-`get_package_version libmcrypt`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi

	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi
	
	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}

	./configure --enable-ltdl-install

	make CFLAGS=-fpic

	if [ $? -ne 0 ]; then
		printf "The make has failed. Exiting"
		do_exit 1
	fi

	echo "Make complete"
	
	make install

	echo "Build libmcrypt completed"


	if [ -d libltdl ]; then
		echo "Install libltdl for libmcrypt"
		cd libltdl
		./configure --enable-ltdl-install
		make
		make install
		echo "Install libltdl for libmcrypt completed"
	fi
}


build_mhash() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="mhash-`get_package_version mhash`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi

	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi
	
	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}

	./configure --prefix=/usr/local
	
	make

	if [ $? -ne 0 ]; then
		printf "The make has failed. Exiting"
		do_exit 1
	fi

	echo "Make complete"
	
	make install

	echo "Build mhash completed"
}


build_freetype2() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="freetype2-`get_package_version freetype2`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi
	
	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi

	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}

	./configure --enable-freetype-config
	
	make

	if [ $? -ne 0 ]; then
		printf "The make has failed. Exiting"
		do_exit 1
	fi

	echo "Make complete"
	
	make install

	echo "Build freetype2 completed"
}

build_iconv() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="iconv-`get_package_version iconv`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi

	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi
	
	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}

	./configure --prefix=/usr/local --enable-extra-encodings
	
	make

	if [ $? -ne 0 ]; then
		printf "The make has failed. Exiting"
		do_exit 1
	fi

	echo "Make complete"
	
	make install

	echo "Build iconv completed"

	/sbin/ldconfig
}

build_icu() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="icu4c-`get_package_version icu4c`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi

	# Remove old folder
	if [ -d "./icu" ]; then
		rm -rf "./icu"
	fi
	
	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	
	cd ./icu/source
	
	mkdir -p /usr/local/icu
	./configure --prefix=/usr/local/icu --enable-rpath
	make -j ${CPU_CORES}

	if [ $? -ne 0 ]; then
		printf "The make has failed. Exiting"
		do_exit 1
	fi

	echo "Make complete"
	
	make install

	ln -sf /usr/local/icu/bin/icu-config /usr/local/bin/icu-config

	echo "Build icu completed"
}

build_libxml2() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="libxml2-`get_package_version libxml2`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi

	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi
	
	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}

	./configure --prefix=/usr/local --without-python --with-zlib=/usr
	
	make

	if [ $? -ne 0 ]; then
		printf "The make has failed. Exiting"
		do_exit 1
	fi

	echo "Make complete"
	
	make install

	echo "Build libxml2 completed"
}


build_libxslt() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="libxslt-`get_package_version libxslt`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi
	
	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi

	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}

	./configure --prefix=/usr/local --with-libxml-prefix=/usr/local
	
	make -j ${CPU_CORES}

	if [ $? -ne 0 ]; then
		printf "The make has failed. Exiting"
		do_exit 1
	fi

	echo "Make complete"
	
	make install

	echo "Build libxslt completed"

	/sbin/ldconfig
}

build_libsodium() {
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="libsodium-`get_package_version libsodium`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi

	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi
	
	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}

	./configure --prefix=/usr/local
	
	make

	if [ $? -ne 0 ]; then
		do_exit 1 "The make has failed. Exiting"
	fi

	echo "Make complete"
	
	make install

	echo "Build libsodium completed"
}

build_php_opt() {
	get_config_options

	local php_version=${1}
	local php_suffix_version=`echo ${php_version//./}`

	# Add app user
	useradd -s /bin/false --no-create-home www

	# Install PHP
	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="php-`get_package_version ${php_suffix_version}`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi
	
	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi

	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}

	echo "Start configure ${file_name}"
	local php_configure_file="${BUILD_DIR}/configure/php/configure.php-${php_suffix_version}"
	sh ${php_configure_file}

	C_INCLUDE_PATH=/usr/kerberos/include make -j ${CPU_CORES}

	if [ $? -ne 0 ]; then
		do_exit 1 "The make has failed. Exiting"
	fi

	echo "Make complete"
	
	make install

	echo "Build ${file_name} completed"

	# Make php-fpm.d folder 
	mkdir -p ${LEO_DIR}/php${php_suffix_version}/etc/php-fpm.d

	# Copy file configs
	local php_config_files="php-fpm.conf"

	for i in ${php_config_files}
	do
		\cp -rf "${BUILD_DIR}/configure/php/etc/${i}" ${LEO_DIR}/php${php_suffix_version}/etc/
	done

	# Enable nginx service
	\cp -rf "${BUILD_DIR}/configure/php/php-fpm${php_suffix_version}.service" /lib/systemd/system/php-fpm${php_suffix_version}.service
	chmod 644 /lib/systemd/system/php-fpm${php_suffix_version}.service
	systemctl enable php-fpm${php_suffix_version}.service
	
	echo "Restarting php${php_suffix_version}.service..."
	systemctl restart php-fpm${php_suffix_version}.service

	# Make symlinks for default
	if [ "${PHP1_VERSION}" == "${1}" ]; then
		rm -rf /usr/bin/php 
		ln -s ${LEO_DIR}/php${php_suffix_version}/bin/php${php_suffix_version} /usr/bin/php
	}
}

build_php() {
	get_config_options

	if [ "${PHP1_ENABLE}" == "yes" ]; then
		# Build required libraries
		build_libjpeg
		build_libpng
		build_libwebp
		build_libmcrypt
		build_mhash
		build_freetype2
		build_iconv
		build_icu
		build_libxml2
		build_libxslt
		build_libsodium

		build_php_opt ${PHP1_VERSION}

		if [ "${PHP2_ENABLE}" == "yes" ]; then 
			build_php_opt ${PHP2_VERSION}
		fi
	fi
}


build_nginx() {
	get_config_options
	if [ "${WEBSERVER_ENABLE}" != "yes" ] || [ "${WEBSERVER_TYPE}" != "nginx" ]; then 
		do_exit 1 "You can't install Nginx"
	fi

	# Add user
	useradd -s /bin/false --no-create-home nginx

	# Create default document root
	if [ ! -d "${LEO_DIR}/nginx/html"  ]; then 
		mkdir -p "${LEO_DIR}/nginx/html"
	fi

	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="nginx-`get_package_version nginx`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi
	
	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi

	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}

	echo "Start configure nginx"
	local nginx_configure_file="${BUILD_DIR}/configure/nginx/configure.nginx"
	sh ${nginx_configure_file}

	if [ $? -ne 0 ]; then
		printf "\n*** There was an error while trying to configure Nginx. Check the ${nginx_configure_file} file\n"
		do_exit 1
	fi

	C_INCLUDE_PATH=/usr/kerberos/include make -j ${CPU_CORES}

	if [ $? -ne 0 ]; then
		do_exit 1 "The make has failed. Exiting"
	fi

	echo "Make complete"
	
	make install

	echo "Build Nginx completed"

	# Nginx configuring..
	echo "Nginx configuring.."

	# Copy file configs
	local nginx_config_files="fastcgi.conf fastcgi.conf.default fastcgi_params fastcgi_params.default koi-utf koi-win mime.types mime.types.default nginx.conf nginx.conf.default nginx-defaults.conf nginx-directoryindex.conf nginx-fastcgi-settings.conf nginx-gzip.conf nginx-includes.conf nginx-info.conf nginx-userdir.conf nginx-vhosts.conf scgi_params uwsgi_params uwsgi_params.default webapps.conf webapps.hostname.conf webapps_settings.conf webapps.ssl.conf win-utf"

	for i in ${nginx_config_files}
	do
		\cp -rf "${BUILD_DIR}/configure/nginx/conf/${i}" ${LEO_DIR}/nginx/conf/
	done

	# Set PHP version for Nginx Apps
	local php_version=`echo "${PHP1_VERSION}" | tr '[:upper:]' '[:lower:]'`
	sed -i "s/{{php_opt_1}}/${php_version}/g" ${LEO_DIR}/nginx/conf/nginx-userdir.conf
	sed -i "s/{{php_opt_1}}/${php_version}/g" ${LEO_DIR}/nginx/conf/nginx-vhosts.conf
	sed -i "s/{{php_opt_1}}/${php_version}/g" ${LEO_DIR}/nginx/conf/webapps_settings.conf
	

	# Enable nginx service
	\cp -rf "${BUILD_DIR}/configure/nginx/nginx.service" /lib/systemd/system/nginx.service
	chmod 644 /lib/systemd/system/nginx.service
	systemctl enable nginx.service
	
	echo "Restarting nginx..."
	systemctl restart nginx.service
}

build_apache() {
	echo "build nginx"
}

build_pma() {
	if [ "${PHP1_ENABLE}" != "yes" ]; then 
		do_exit "You need install PHP first"
	fi

	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="phpMyAdmin-`get_package_version pma`-all-languages"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi

	tar zxvf "${file_name}.${file_ext}"
	rm -rf "${LEO_DIR}/nginx/html/${file_name}"
	rm -rf "${LEO_DIR}/nginx/html/pma"
	mv ${file_name} "${LEO_DIR}/nginx/html/${file_name}"
	ln -s "${LEO_DIR}/nginx/html/${file_name}" "${LEO_DIR}/nginx/html/pma"

	echo "Install PhpMyAdmin completed"
}

build_ftp() {
	get_config_options
	if [ "${FTP_ENABLE}" != "yes" ]; then 
		do_exit 1 "You can't install Pure-FTPd"
	fi

	cd ${BUILD_SOURCE_DIR}
	local file_ext="tar.gz"
	local file_name="pure-ftpd-`get_package_version pure-ftpd`"

	if [ ! -s "${file_name}.${file_ext}" ]; then  
		echo "Start build ${file_name}"
		echo "Downloading ..."
		get_source_file "${file_name}.${file_ext}"
	fi
	
	# Remove old folder
	if [ -d "./${file_name}" ]; then
		rm -rf "./${file_name}"
	fi

	echo "Extracting ..."
	tar zxvf "${file_name}.${file_ext}"
	cd ${file_name}

	echo "Start configure nginx"
	local configure_file="${BUILD_DIR}/configure/pure-ftpd/configure.pure-ftpd"
	sh ${configure_file}

	if [ $? -ne 0 ]; then
		printf "\n*** There was an error while trying to configure Pure-FTPd. Check the ${configure_file} file\n"
		do_exit 1
	fi

	make -j ${CPU_CORES}

	if [ $? -ne 0 ]; then
		do_exit 1 "The make has failed. Exiting"
	fi

	echo "Make complete"
	
	make install

	echo "Build Pure-FTPd completed"

	# Pure-FTPd configuring..
	echo "Pure-FTPd configuring..."

	if [ ! -e /etc/proftpd.passwd ]; then
		touch /etc/proftpd.passwd
		chmod 640 /etc/proftpd.passwd
	fi

	pure-pw mkdb /etc/pureftpd.pdb -f /etc/proftpd.passwd

	# Generate CA for pure-ftpd
	if [ ! -e "${LEO_DIR}/ssl/pure-ftpd.pem" ]; then 
		create_ssl

		cat "${LEO_DIR}/ssl/server.key" > "${LEO_DIR}/ssl/pure-ftpd.pem"
		cat "${LEO_DIR}/ssl/server.combined" >> "${LEO_DIR}/ssl/pure-ftpd.pem"
		chmod 600 "${LEO_DIR}/ssl/pure-ftpd.pem"
	fi

	if [ ! -e /etc/logrotate.d/pure-ftpd ] && [ ${OS} != "FreeBSD" ]; then
		wget ${WGET_CONNECT_OPTIONS} ${WEBPATH}/pure-ftpd.logrotate -O /etc/logrotate.d/pure-ftpd
	fi
	

	# Enable nginx service
	\cp -rf "${BUILD_DIR}/configure/nginx/pure-ftpd.service" /lib/systemd/system/pure-ftpd.service
	chmod 644 /lib/systemd/system/pure-ftpd.service
	systemctl enable pure-ftpd.service
	
	echo "Restarting Pure-FTPd..."
	systemctl restart pure-ftpd.service
}

build_letsencrypt() {

	echo "Start installation letsencrypt.."
	if [ -d "${LEO_DIR}/certbot" ]; then 
		rm -rf "${LEO_DIR}/certbot"
	fi

	echo "Start installation git command"
	yum install git -y

	echo "Cloning certbot repo"
	cd ${LEO_DIR}
	git clone https://github.com/certbot/certbot.git

	cd ${LEO_DIR}/certbot
	./certbot-auto --install-only --non-interactive

	echo "Install letsencrypt completed"
}

build_all() {
	build_autoconf
	build_pcre
	build_pcre2

	if [ "${WEBSERVER_ENABLE}" == "yes" ]; then 
		if [ "${WEBSERVER_TYPE}" == "nginx" ]; then 
			build_nginx
		elif [ "${WEBSERVER_TYPE}" == "apache" ]; then
			build_apache
		fi
	fi

	build_php

	if [ "${PMA_ENABLE}" == "yes" ]; then 
		build_pma
	fi 

	if [ "${FTP_ENABLE}" == "yes" ]; then
		build_ftp
	fi

	if [ "${LETSENCRYPT_ENABLE}" == "yes" ]; then
		build_letsencrypt
	fi
}


# MAIN
case "${1}" in 
	"") echo "Welcome to Leoparx Server" ;;
	h|help) echo "Help function" ;;
	update) echo "Update function" ;;
	show_configs) echo "Show configs" ;;
	build_all) build_all ;;
	php) build_php ;;
	set_option) build_config_options ;;
	nginx) build_nginx ;;
	ftp) build_ftp ;;
	pma) build_pma ;;
	letsencrypt) build_letsencrypt ;;
esac

# Exit 
do_exit 1